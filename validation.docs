const Joi = require('joi');

// Define reusable validation rules
const nameField = () =>
    Joi.string().min(2).max(50).required().messages({
        'string.empty': 'Name is required',
        'string.min': 'Name should have at least 2 characters',
        'string.max': 'Name should have at most 50 characters',
    });

const mobileNumberField = () =>
    Joi.string()
        .pattern(/^[0-9]{10}$/)
        .required()
        .messages({
            'string.empty': 'Mobile number is required',
            'string.pattern.base': 'Mobile number must be a valid 10-digit number',
        });

const addressDetailsField = Joi.string().optional().allow('').max(250).messages({
    'string.max': 'Address details cannot exceed 250 characters',
});

const identificationField = Joi.object({
    type: Joi.string().valid('ID_CARD', 'PASSPORT', 'DRIVING_LICENSE').required(),
    number: Joi.string().required(),
}).required();

const updateProfileSchema = {
    body: Joi.object({
        name: nameField(),
        mobile_number: mobileNumberField(),
        address_details: addressDetailsField,
        identification: identificationField,
        profile_image: Joi.any()
            .meta({ swaggerType: 'file' })
            .optional()
            .description('Profile image file'),
    }),
    query: Joi.object({
        token: Joi.string().optional().messages({
            'string.empty': 'Token must not be empty',
        }),
    }),
    params: Joi.object({
        userId: Joi.string()
            .pattern(/^[a-f\d]{24}$/i) // MongoDB ObjectId pattern
            .required()
            .messages({
                'string.empty': 'User ID is required',
                'string.pattern.base': 'User ID must be a valid 24-character MongoDB ObjectId',
            }),
    }),
    headers: Joi.object({
        authorization: Joi.string()
            .pattern(/^Bearer\s[\w-]+\.[\w-]+\.[\w-]+$/)
            .required()
            .messages({
                'string.empty': 'Authorization header is required',
                'string.pattern.base': 'Authorization must be a valid Bearer token',
            }),
    }).unknown(), // Allow other headers
};

module.exports = updateProfileSchema;
